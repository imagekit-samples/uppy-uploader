{"id":"../node_modules/@uppy/utils/lib/dataURItoBlob.js","dependencies":[{"name":"/Users/manuchaudhary/uppy-uploader/package.json","includedInParent":true,"mtime":1595074329508},{"name":"/Users/manuchaudhary/uppy-uploader/node_modules/@uppy/utils/package.json","includedInParent":true,"mtime":1594920212982}],"generated":{"js":"module.exports = function dataURItoBlob(dataURI, opts, toFile) {\n  // get the base64 data\n  var data = dataURI.split(',')[1]; // user may provide mime type, if not get it from data URI\n\n  var mimeType = opts.mimeType || dataURI.split(',')[0].split(':')[1].split(';')[0]; // default to plain/text if data URI has no mimeType\n\n  if (mimeType == null) {\n    mimeType = 'plain/text';\n  }\n\n  var binary = atob(data);\n  var array = [];\n\n  for (var i = 0; i < binary.length; i++) {\n    array.push(binary.charCodeAt(i));\n  }\n\n  var bytes;\n\n  try {\n    bytes = new Uint8Array(array); // eslint-disable-line compat/compat\n  } catch (err) {\n    return null;\n  } // Convert to a File?\n\n\n  if (toFile) {\n    return new File([bytes], opts.name || '', {\n      type: mimeType\n    });\n  }\n\n  return new Blob([bytes], {\n    type: mimeType\n  });\n};"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/@uppy/utils/lib/dataURItoBlob.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/@uppy/utils/lib/dataURItoBlob.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/@uppy/utils/lib/dataURItoBlob.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/@uppy/utils/lib/dataURItoBlob.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/@uppy/utils/lib/dataURItoBlob.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/@uppy/utils/lib/dataURItoBlob.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/@uppy/utils/lib/dataURItoBlob.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/@uppy/utils/lib/dataURItoBlob.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/@uppy/utils/lib/dataURItoBlob.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/@uppy/utils/lib/dataURItoBlob.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/@uppy/utils/lib/dataURItoBlob.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/@uppy/utils/lib/dataURItoBlob.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/@uppy/utils/lib/dataURItoBlob.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/@uppy/utils/lib/dataURItoBlob.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/@uppy/utils/lib/dataURItoBlob.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/@uppy/utils/lib/dataURItoBlob.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/@uppy/utils/lib/dataURItoBlob.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/@uppy/utils/lib/dataURItoBlob.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/@uppy/utils/lib/dataURItoBlob.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/@uppy/utils/lib/dataURItoBlob.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/@uppy/utils/lib/dataURItoBlob.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/@uppy/utils/lib/dataURItoBlob.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/@uppy/utils/lib/dataURItoBlob.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/@uppy/utils/lib/dataURItoBlob.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/@uppy/utils/lib/dataURItoBlob.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/@uppy/utils/lib/dataURItoBlob.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/@uppy/utils/lib/dataURItoBlob.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/@uppy/utils/lib/dataURItoBlob.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/@uppy/utils/lib/dataURItoBlob.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/@uppy/utils/lib/dataURItoBlob.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/@uppy/utils/lib/dataURItoBlob.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/@uppy/utils/lib/dataURItoBlob.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/@uppy/utils/lib/dataURItoBlob.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/@uppy/utils/lib/dataURItoBlob.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/@uppy/utils/lib/dataURItoBlob.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/@uppy/utils/lib/dataURItoBlob.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}}],"sources":{"../node_modules/@uppy/utils/lib/dataURItoBlob.js":"module.exports = function dataURItoBlob(dataURI, opts, toFile) {\n  // get the base64 data\n  var data = dataURI.split(',')[1]; // user may provide mime type, if not get it from data URI\n\n  var mimeType = opts.mimeType || dataURI.split(',')[0].split(':')[1].split(';')[0]; // default to plain/text if data URI has no mimeType\n\n  if (mimeType == null) {\n    mimeType = 'plain/text';\n  }\n\n  var binary = atob(data);\n  var array = [];\n\n  for (var i = 0; i < binary.length; i++) {\n    array.push(binary.charCodeAt(i));\n  }\n\n  var bytes;\n\n  try {\n    bytes = new Uint8Array(array); // eslint-disable-line compat/compat\n  } catch (err) {\n    return null;\n  } // Convert to a File?\n\n\n  if (toFile) {\n    return new File([bytes], opts.name || '', {\n      type: mimeType\n    });\n  }\n\n  return new Blob([bytes], {\n    type: mimeType\n  });\n};"},"lineCount":36}},"error":null,"hash":"13660125cac33847f1b6aa22b31ac9cc","cacheData":{"env":{}}}