{"id":"../node_modules/@uppy/dashboard/lib/utils/truncateString.js","dependencies":[{"name":"/Users/manuchaudhary/uppy-uploader/package.json","includedInParent":true,"mtime":1595074329508},{"name":"/Users/manuchaudhary/uppy-uploader/node_modules/@uppy/dashboard/package.json","includedInParent":true,"mtime":1594921791406}],"generated":{"js":"/**\n * Truncates a string to the given number of chars (maxLength) by inserting '...' in the middle of that string.\n * Partially taken from https://stackoverflow.com/a/5723274/3192470.\n *\n * @param {string} string - string to be truncated\n * @param {number} maxLength - maximum size of the resulting string\n * @returns {string}\n */\nmodule.exports = function truncateString(string, maxLength) {\n  var separator = '...'; // Return original string if it's already shorter than maxLength\n\n  if (string.length <= maxLength) {\n    return string; // Return truncated substring without '...' if string can't be meaningfully truncated\n  } else if (maxLength <= separator.length) {\n    return string.substr(0, maxLength); // Return truncated string divided in half by '...'\n  } else {\n    var charsToShow = maxLength - separator.length;\n    var frontChars = Math.ceil(charsToShow / 2);\n    var backChars = Math.floor(charsToShow / 2);\n    return string.substr(0, frontChars) + separator + string.substr(string.length - backChars);\n  }\n};"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/@uppy/dashboard/lib/utils/truncateString.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/@uppy/dashboard/lib/utils/truncateString.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/@uppy/dashboard/lib/utils/truncateString.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/@uppy/dashboard/lib/utils/truncateString.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/@uppy/dashboard/lib/utils/truncateString.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/@uppy/dashboard/lib/utils/truncateString.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/@uppy/dashboard/lib/utils/truncateString.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/@uppy/dashboard/lib/utils/truncateString.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/@uppy/dashboard/lib/utils/truncateString.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/@uppy/dashboard/lib/utils/truncateString.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/@uppy/dashboard/lib/utils/truncateString.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/@uppy/dashboard/lib/utils/truncateString.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/@uppy/dashboard/lib/utils/truncateString.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/@uppy/dashboard/lib/utils/truncateString.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/@uppy/dashboard/lib/utils/truncateString.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/@uppy/dashboard/lib/utils/truncateString.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/@uppy/dashboard/lib/utils/truncateString.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/@uppy/dashboard/lib/utils/truncateString.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/@uppy/dashboard/lib/utils/truncateString.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/@uppy/dashboard/lib/utils/truncateString.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/@uppy/dashboard/lib/utils/truncateString.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/@uppy/dashboard/lib/utils/truncateString.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}}],"sources":{"../node_modules/@uppy/dashboard/lib/utils/truncateString.js":"/**\n * Truncates a string to the given number of chars (maxLength) by inserting '...' in the middle of that string.\n * Partially taken from https://stackoverflow.com/a/5723274/3192470.\n *\n * @param {string} string - string to be truncated\n * @param {number} maxLength - maximum size of the resulting string\n * @returns {string}\n */\nmodule.exports = function truncateString(string, maxLength) {\n  var separator = '...'; // Return original string if it's already shorter than maxLength\n\n  if (string.length <= maxLength) {\n    return string; // Return truncated substring without '...' if string can't be meaningfully truncated\n  } else if (maxLength <= separator.length) {\n    return string.substr(0, maxLength); // Return truncated string divided in half by '...'\n  } else {\n    var charsToShow = maxLength - separator.length;\n    var frontChars = Math.ceil(charsToShow / 2);\n    var backChars = Math.floor(charsToShow / 2);\n    return string.substr(0, frontChars) + separator + string.substr(string.length - backChars);\n  }\n};"},"lineCount":22}},"error":null,"hash":"7cae3ecfbfb98f21246e1dc1c012b6ab","cacheData":{"env":{}}}